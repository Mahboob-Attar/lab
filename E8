A)
db.students.insertMany([
  { "studentID": 1, "name": "Student1", "age": 22, "city": "New York", "tags": ["tag1", "tag2", "tag3"] },
  { "studentID": 2, "name": "Student2", "age": 25, "city": "India", "tags": ["tag1", "tag2", "tag3"] },
  { "studentID": 3, "name": "Student3", "age": 30, "city": "London", "tags": ["tag1", "tag2", "tag3"] },
  { "studentID": 4, "name": "Student4", "age": 35, "city": "Chicago", "tags": ["tag1", "tag2", "tag3"] },
  { "studentID": 5, "name": "Student5", "age": 40, "city": "New York", "tags": ["tag1", "tag2", "tag3"] },

db.students.createIndex({ studentID: 1 }, { unique: true });
db.students.createIndex({ city: 1 }, { sparse: true });
db.students.createIndex({ tags: 1 }); //multikey
db.students.createIndex({ city: 1, age: 1 }); //compound index
db.students.getIndexes(); //verify index

b)
// Find the student with the highest age
db.students.find({}).sort({age: -1}).limit(1);

// Explain the query plan
db.students.find({}).sort({age: -1}).limit(1).explain();

// Explain the query with execution statistics
db.students.find({}).sort({age: -1}).limit(1).explain("executionStats");


*********************
// 8 b. import the document provided into collection named stocks created by you.  
db.stocks.find({}).sort({location: -1}).limit(1).explain("executionStats").executionStats.totalDocsExamined
// output: 731290
 
db.stocks.find({}).sort({ location: -1 }).limit(1).explain("executionStats").executionStats.executionTimeMillis;
// output: 423


db.stocks.createIndex({location: 1}) 
// output : location_1
  
db.stocks.find({}).sort({location: -1}).limit(1).explain("executionStats").executionStats.totalDocsExamined
//    output : 1 

db.values.find({}).sort({location: -1}).limit(1).explain("executionStats").executionStats.executionTimeMillis
//   output : 0

